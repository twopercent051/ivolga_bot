from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class AdminInlineKeyboard(InlineKeyboardMarkup):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞"""

    @classmethod
    def home_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def main_menu_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text='–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='tickets')],
            [InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistics')],
            [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤', callback_data='edition')],
            [InlineKeyboardButton(text='–í—ã–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ XLSX', callback_data='download')],
            [InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ XLSX', callback_data='upload')],
            [InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing:start')],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def edition_kb(cls, button_list: list, is_main_menu: bool) -> InlineKeyboardMarkup:
        keyboard = []
        action = "edit_button" if is_main_menu else "parent_id"
        for button in button_list:
            clb_text = button["button"] if button["button"] else button["id"]
            keyboard.append([InlineKeyboardButton(text=clb_text, callback_data=f"{action}:{button['id']}")])
        if is_main_menu:
            keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_button")])
            keyboard.append([InlineKeyboardButton(text="üôã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="type_msg:greeting")])
            keyboard.append([InlineKeyboardButton(text="‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", callback_data="type_msg:choose_question")])
            keyboard.append([InlineKeyboardButton(text="üìÑ –û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="type_msg:leave_ticket")])
            keyboard.append([InlineKeyboardButton(text="üõ† –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º", callback_data="type_msg:thank_you")])
            keyboard.append([InlineKeyboardButton(text="üõè –ú—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º", callback_data="rebound:start")])
        else:
            keyboard.append([InlineKeyboardButton(text="üë®‚Äçüë¶‚Äçüë¶ –≠—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="parent_id:0")])
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def button_or_text(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ', callback_data='edit:button'),
                InlineKeyboardButton(text='–¢–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏', callback_data='edit:text'),
                InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='delete_button:question'),
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def accept_delete_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="delete_button:accept"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home"),
            ],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def rebound_menu(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text='–¢–µ–∫—Å—Ç', callback_data='rebound:text'),
                InlineKeyboardButton(text='–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è', callback_data='rebound:worktime'),
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def tickets_kb(cls, ticket_list: list) -> InlineKeyboardMarkup:
        keyboard = []
        for ticket in ticket_list:
            keyboard.append([InlineKeyboardButton(text=f"–û–±—Ä–∞—â–µ–Ω–∏–µ # {ticket['id']}",
                                                  callback_data=f"ticket:{ticket['id']}")])
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def ticket_kb(cls, ticket_hash, user_id) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"dialog:{user_id}|ticket:{ticket_hash}")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", callback_data=f"finish_ticket:{ticket_hash}")],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def categories_kb(cls, category_list: list | None) -> InlineKeyboardMarkup:
        keyboard = []
        for category in category_list:
            if category["category"]:
                keyboard.append([InlineKeyboardButton(text=category["category"],
                                                      callback_data=f"mailing:{category['category']}")])
        keyboard.append([InlineKeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"mailing:all")])
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def url_mailing_kb(cls, text: str, url: str) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text=text, url=url)],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def mailing_accept_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="mailing:accept"),
                InlineKeyboardButton(text="–ù–µ—Ç, –Ω–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="mailing:start"),
            ],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard


class UserInlineKeyboard(InlineKeyboardMarkup):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    @classmethod
    def mailing_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text='–î–∞', callback_data='mailing:yes'),
                InlineKeyboardButton(text='–ù–µ—Ç', callback_data='mailing:no'),
            ],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def parent_polling_kb(cls, polling_list: list) -> InlineKeyboardMarkup:
        keyboard = []
        for button in polling_list:
            keyboard.append([InlineKeyboardButton(text=button["button"], callback_data=f"question:{button['id']}")])
        keyboard.append([InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="dialog:start")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def child_polling_kb(cls, polling_list: list, parent_id: int) -> InlineKeyboardMarkup:
        keyboard = []
        for button in polling_list:
            keyboard.append([InlineKeyboardButton(text=button["button"], callback_data=f"question:{button['id']}")])
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back:{parent_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def home_kb(cls) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:0")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard

    @classmethod
    def admin_dialog_kb(cls, user_id: str, ticket_hash: str) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"dialog:{user_id}|ticket:{ticket_hash}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        return keyboard
